% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shadowcat.R
\name{shadowcat}
\alias{shadowcat}
\title{Returns a list with the key of the next item to be administered given a new answer,
an updated estimate of theta, updated covariance matrix of theta converted to a vector, and the answers to the administered items}
\usage{
shadowcat(answers, estimate, variance, model, alpha, beta, start_items,
  stop_test, estimator, information_summary, prior_form = NULL,
  prior_parameters = NULL, guessing = NULL, eta = NULL,
  constraints_and_characts = NULL, lower_bound = NULL, upper_bound = NULL,
  safe_eap = FALSE, eap_estimation_procedure = "riemannsum")
}
\arguments{
\item{answers}{named list of previous answers and new answer, with names being the item keys; should be initialized with NULL}

\item{estimate}{vector with estimate of latent trait theta}

\item{variance}{(co)variance matrix of the estimate, as vector}

\item{model}{One of '3PLM', 'GPCM', 'SM' or 'GRM', for the three-parameter logistic, generalized partial credit, sequential or graded response model respectively.}

\item{alpha}{Matrix of alpha parameters, one column per dimension, one row per item. Row names should contain the item keys. Note that so called within-dimensional models still use an alpha matrix, they simply 
have only one non-zero loading per item.}

\item{beta}{Matrix of beta parameters, one column per item step, one row per item. Row names should contain the item keys. Note that ShadowCAT expects answer categories to be sequential,
and without gaps. That is, the weight parameter in the GPCM model is assumed to be sequential, and equal to the position of the 'location' of the beta parameter in the Beta matrix.
The matrix will have a number of columns equal to the largest number of item steps over items, items with fewer answer categories should be 
right-padded with \code{NA}. \code{NA} values between answer categories are not allowed, and will lead to errors.
Beta matrix can be set to NULL if model is GPCM and eta is defined
More flexibility in Beta parameters might be added in future versions.}

\item{start_items}{List indicating the items that are shown to the respondent before adaptive proces starts; one of
list(type = 'random', n)
list(type = 'fixed', item_keys, n)
list(type = 'random_by_dimension', n_by_dimension, n)
where n = total number of initial items, item_keys = character vector with keys of initial items, 
n_by_dimension = scalar of number of initial items per dimension, or vector with number of initial items for each dimension
If n is 0, only n needs to be defined
'random_by_dimension' assumes that items load on a single dimension, if any item has a non-zero loading on a dimension, it is considered to be part of that dimension.}

\item{stop_test}{List indicating rules for when to stop providing new items to respondent; should be a list of the form
list(target = ..., max_n = ..., min_n = ..., cutoffs = ...), 
where max_n = test length at which testing should stop (even if target has not been reached yet in case of variance stopping rule), 
target = vector of maximum acceptable variances per dimension; NULL means no variance target,
min_n = minimum test length; NULL means no mimimum test length,
cutoffs = matrix containing cut off values per dimension (columns) and test iteration (rows). First row contains cut off values for when no items have been
administered yet, second row for when one item has been administered, etc. If estimate + 3SE < cutoff for each dimension at certain iteration, test stops; 
NULL means no cut off values}

\item{estimator}{Type of estimator to be used, one of "maximum_aposteriori", "maximum_likelihood", or "expected_aposteriori"}

\item{information_summary}{How to summarize Fisher information, used for selection of item with maximum information; one of
"determinant": compute determinant(info_sofar_QxQ + info_QxQ_k) for each yet available item k
"posterior_determinant": compute determinant(info_sofar_QxQ_plus_prior_information + info_QxQ_k) for each yet available item k
"trace": compute trace((info_sofar_QxQ + info_QxQ_k) for each yet available item k
"posterior_trace": compute trace(info_sofar_QxQ_plus_prior_information + info_QxQ_k) for each yet available item k
"posterior_expected_kullback_leibler" = compute Posterior expected Kullback-Leibler Information}

\item{prior_form}{String indicating the form of the prior; one of "normal" or "uniform". Not required if estimator is maximum_likelihood}

\item{prior_parameters}{List containing mu and Sigma of the normal prior: list(mu = ..., Sigma = ...), or 
the upper and lower bound of the uniform prior: list(lower_bound = ..., upper_bound = ...). . Not required if estimator is maximum_likelihood.
Sigma should always be in matrix form. The length of lower_bound and upper_bound should be equal to the number of dimensions.
For uniform prior in combination with expected aposteriori estimation, true theta should fall within 
lower_bound and upper_bound and be not too close to one of these bounds. Setting the function argument safe_eap to TRUE
ensures that the estimation switches to maximum aposteriori if the expected aposteriori estimate fails.}

\item{guessing}{Matrix with one column of guessing parameters per item. Row names should contain the item keys. Optionally used in 3PLM model, ignored for all others.}

\item{eta}{Matrix of location parameters, optionally used in GPCM model, ignored for all others. Row names should contain the item keys.}

\item{constraints_and_characts}{list with constraints and characteristics; NULL means no constraints
constraints should be specified as a list of constraints, each constraint is a list with three named values;
name: the column name of the characteristic this constraint applies to. For categorical characteristics the level should be specified as name/value.
op: the logical operator to be used. Valid options are "<", "=", ">" and "><".
target: the target value, numeric. If the operator is "><", this should be a length two vector in between which the target should fall.
characteristics should be a data.frame with characteristics, one row per item (rows in the same order as they are in alpha, beta, etc.), one column per characteristic.
See constraints_lp_format() for details}

\item{lower_bound}{Vector with lower bounds for theta per dimension; estimated theta values smaller than the lowerbound values are truncated to the lowerbound values.
Can only be defined when estimator is maximum_likelihood. Setting bounds with maximum likelihood estimation is equivalent to
using maximum aposteriori estimation with a uniform prior.}

\item{upper_bound}{Vector with upper bounds for theta per dimension; estimated theta values larger than the upperbound values are truncated to the upperbound values
Can only be defined when estimator is maximum_likelihood. Setting bounds with maximum likelihood estimation is equivalent to
using maximum aposteriori estimation with a uniform prior.}

\item{safe_eap}{Only relevant if estimator is expected_aposteriori. 
TRUE if estimator should switch to maximum aposteriori if the integration algorithm results in an error.
An error may occur if the prior is uniform, estimator is expected aposteriori, and the bounds do not exceed the true theta value, or are too close to it.}

\item{eap_estimation_procedure}{String indicating the estimation procedure if estimator is expected aposteriori and prior form is normal. One of "riemannsum" for integration via Riemannsum or
"gauss_hermite_quad" for integration via Gaussian Hermite Quadrature. If prior form is uniform, estimation procedure should always be "riemannsum".}
}
\value{
List containing the key of the next item to be administered given a new answer, an indicator for whether the test should be continued,
updated estimate of theta, updated covariance matrix of theta converted to a vector, and the answers to the administered items (named list)
}
\description{
Returns a list with the key of the next item to be administered given a new answer,
an updated estimate of theta, updated covariance matrix of theta converted to a vector, and the answers to the administered items
}
\examples{
alpha_beta <- simulate_testbank(model = "GPCM", number_items = 100, number_dimensions = 3, number_itemsteps = 3)
model <- "GPCM"
start_items <- list(type = 'fixed', item_keys = c("item33", "item5", "item23"), n = 3)
stop_test <- list(min_n = 4, max_n = 30, target = c(.1, .1, .1))
estimator <- "maximum_aposteriori"
information_summary <- "posterior_determinant"
prior_form <- "normal"
prior_parameters <- list(mu = c(0, 0, 0), Sigma = diag(3))

# Initial call: get key of first item to adminster
call1 <- shadowcat(answers = NULL, estimate = c(0, 0, 0), variance = as.vector(diag(3) * 25), model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)
# Second to fourth call: number of start items is set to 3, so no update in theta estimate yet
call2 <- shadowcat(answers = list(item33 = 2), estimate = call1$estimate, variance = call1$variance, model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)
call3 <- shadowcat(answers = list(item33 = 2, item5 = 3), estimate = call2$estimate, variance = call2$variance, model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)
call4 <- shadowcat(answers = list(item33 = 2, item5 = 3, item23 = 3), estimate = call3$estimate, variance = call3$variance, model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)
# Fifth call: first time theta estimate is updated
call5 <- shadowcat(answers = list(item33 = 2, item5 = 3, item23 = 3, item84 = 1), estimate = call4$estimate, variance = call4$variance, model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)
# Sixth call: use the updated estimate and variance as the current values for estimate and variance
call6 <- shadowcat(answers = list(item33 = 2, item5 = 3, item23 = 3, item84 = 1, item36 = 2), estimate = call5$estimate, variance = call5$variance, model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters)

# With constraints

constraints_and_characteristics <- list(characteristics = data.frame(content = sample(c('algebra','physics','calculus'), size = 100, replace = TRUE),
                                                                     time = runif(100),
                                                                     exclusive = sapply(1:100, FUN = function (x) { if (x \%in\% sample(1:100, size = 4)) 1 else 0 })),
                                        constraints = list(list(name = 'content/algebra',
                                                                op = '><',
                                                                target = c(5, 10)), # ensure number of algebra items is between 5 and 10
                                                           list(name = 'content/physics',
                                                                op = '><',
                                                                target = c(2, 5)), # ensure number of physics items is between 2 and 5
                                                           list(name = 'time',
                                                                op = '<',
                                                                target = 20), # Ensure total tests takes no longer than 20 minutes
                                                           list(name = 'exclusive',
                                                                op = '<',
                                                                target = 2))) # Ensure number of exclusive items equals 2
                                                             
shadowcat(answers = NULL, estimate = c(0, 0, 0), variance = as.vector(diag(3) * 25), model = model, alpha = alpha_beta$alpha, beta = alpha_beta$beta, start_items = start_items, stop_test = stop_test, estimator = estimator, information_summary = information_summary, prior_form = prior_form, prior_parameters = prior_parameters, constraints_and_characts = constraints_and_characteristics)
}

