// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// log1pExp
double log1pExp(double x);
RcppExport SEXP ShadowCAT_log1pExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    __result = Rcpp::wrap(log1pExp(x));
    return __result;
END_RCPP
}
// logExpXplusExpY
double logExpXplusExpY(const double x, const double y);
RcppExport SEXP ShadowCAT_logExpXplusExpY(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    __result = Rcpp::wrap(logExpXplusExpY(x, y));
    return __result;
END_RCPP
}
// logExpXminusExpY
double logExpXminusExpY(const double x, const double y);
RcppExport SEXP ShadowCAT_logExpXminusExpY(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    __result = Rcpp::wrap(logExpXminusExpY(x, y));
    return __result;
END_RCPP
}
// PROB_3PLM
List PROB_3PLM(NumericVector theta, NumericMatrix a, NumericVector b, NumericVector c, NumericVector u, bool deriv);
RcppExport SEXP ShadowCAT_PROB_3PLM(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP uSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    __result = Rcpp::wrap(PROB_3PLM(theta, a, b, c, u, deriv));
    return __result;
END_RCPP
}
// PROB_GRM
List PROB_GRM(NumericVector theta, NumericMatrix a, NumericMatrix b, NumericVector u, bool deriv);
RcppExport SEXP ShadowCAT_PROB_GRM(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    __result = Rcpp::wrap(PROB_GRM(theta, a, b, u, deriv));
    return __result;
END_RCPP
}
// PROB_SM
List PROB_SM(NumericVector theta, NumericMatrix a, NumericMatrix b, NumericVector u, bool deriv);
RcppExport SEXP ShadowCAT_PROB_SM(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    __result = Rcpp::wrap(PROB_SM(theta, a, b, u, deriv));
    return __result;
END_RCPP
}
// PROB_GPCM
List PROB_GPCM(NumericVector theta, NumericMatrix a, NumericMatrix b, NumericVector u, bool deriv);
RcppExport SEXP ShadowCAT_PROB_GPCM(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< bool >::type deriv(derivSEXP);
    __result = Rcpp::wrap(PROB_GPCM(theta, a, b, u, deriv));
    return __result;
END_RCPP
}
